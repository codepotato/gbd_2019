col = "#d81670"),
draw = TRUE,
vp = NULL)
grid.text(paste0(format(wsx_16_64_second_doses, big.mark = ','),' received two doses'),
just = "left",
x = unit(0.305, "npc"),
y = unit(0.18, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.rect(x = unit(0.29, "npc"),
y = unit(0.155, "npc"),
width = unit(0.0175, "npc"),
height = unit(0.0175, "npc"),
just = "centre",
default.units = "npc",
gp=gpar(fill = "#f5a0c7",
col = "#f5a0c7"),
draw = TRUE,
vp = NULL)
grid.text(paste0(format(wsx_16_64_first_dose_only, big.mark = ','),' first dose only'),
just = "left",
x = unit(0.305, "npc"),
y = unit(0.155, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.rect(x = unit(0.29, "npc"),
y = unit(0.13, "npc"),
width = unit(0.0175, "npc"),
height = unit(0.0175, "npc"),
just = "centre",
default.units = "npc",
gp=gpar(fill = "#dbdbdb",
col = "#dbdbdb"),
draw = TRUE,
vp = NULL)
grid.text(paste0(format(wsx_16_64_unvaccinated, big.mark = ','),' not vaccinated'),
just = "left",
x = unit(0.305, "npc"),
y = unit(0.13, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
# Over time ####
grid.roundrect(x = unit(0.5, "npc"),
y = unit(0.45, "npc"),
width = unit(0.24, "npc"),
height = unit(0.13, "npc"),
just = "left",
default.units = "npc",
gp=gpar(fill = "#ffffff",
col = "#ffffff"),
vp = NULL)
grid.text('First dose vaccinations in',
just = "centre",
x = unit(0.62, "npc"),
y = unit(0.49, "npc"),
gp = gpar(col = "#000000",
fontsize = "9",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('the seven days to ', This_week_vac_date),
just = "centre",
x = unit(0.62, "npc"),
y = unit(0.47, "npc"),
gp = gpar(col = "#000000",
fontsize = "9",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(format(wsx_first_doses_seven_days$This_week, big.mark = ','),
just = "centre",
x = unit(0.62, "npc"),
y = unit(0.43, "npc"),
gp = gpar(col = "#000000",
fontsize = "35",
fontfamily = 'Bahnschrift',
fontface = 'bold'))
grid.roundrect(x = unit(0.75, "npc"),
y = unit(0.45, "npc"),
width = unit(0.24, "npc"),
height = unit(0.13, "npc"),
just = "left",
default.units = "npc",
gp=gpar(fill = "#ffffff",
col = "#ffffff"),
vp = NULL)
grid.text('Second dose vaccinations in',
just = "centre",
x = unit(0.87, "npc"),
y = unit(0.49, "npc"),
gp = gpar(col = "#000000",
fontsize = "9",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('the seven days to ', This_week_vac_date),
just = "centre",
x = unit(0.87, "npc"),
y = unit(0.47, "npc"),
gp = gpar(col = "#000000",
fontsize = "9",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(format(wsx_second_doses_seven_days$This_week, big.mark = ','),
just = "centre",
x = unit(0.87, "npc"),
y = unit(0.43, "npc"),
gp = gpar(col = "#000000",
fontsize = "35",
fontfamily = 'Bahnschrift',
fontface = 'bold'))
grid.text('COVID-19 IN HOSPITALS',
just = "left",
x = unit(0.53, "npc"),
y = unit(0.35, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "20",
fontfamily = 'Bahnschrift',
fontface = 'bold'))
grid.text('ACROSS THE REGION',
just = "left",
x = unit(0.53, "npc"),
y = unit(0.32, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "20",
fontfamily = 'Bahnschrift',
fontface = 'bold'))
grid.text(paste0('In the South East region on ', format(se_hospital_df$Date, '%A '), ordinal(as.numeric(format(se_hospital_df$Date, '%d'))), format(se_hospital_df$Date, ' %B'), ', there'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.28, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('were ', format(se_hospital_df$Patients_occupying_beds, big.mark = ','), ' COVID-19 positive patients in hospital beds.'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.26, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('The number of people in hospital beds with COVID-19'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.22, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('has ', se_hospital_df$Change_direction, ' compared to the 7 days before (', format(se_hospital_df$Previous_occupying_beds, big.mark = ','), ')'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.2, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('Of those patients currently in hospital, ', format(se_hospital_df$Patients_occupying_mv_beds, big.mark = ','), ' were'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.16, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('occupying beds capable of mechanical ventilation.'),
just = "left",
x = unit(0.53, "npc"),
y = unit(0.14, "npc"),
gp = gpar(col = "#ffffff",
fontsize = "10",
# fontfamily = 'Verdana',
fontface = 'bold'))
# Banner bottom #
grid.rect(x = unit(0.5, "npc"),
y = unit(0.04, "npc"),
width = unit(1, "npc"),
height = unit(0.08, "npc"),
just = "centre",
default.units = "npc",
gp=gpar(fill = "#F8E821",
col = "#F8E821"),
draw = TRUE,
vp = NULL)
grid.text('PUBLICATION DATE:',
just = "left",
x = unit(0.04, "npc"),
y = unit(0.04, "npc"),
gp = gpar(col = "#000000",
fontsize = "16",
fontfamily = 'Bahnschrift',
fontface = 'bold'))
grid.text(paste0(ordinal(as.numeric(format(last_date + 1 , '%d'))), format(last_date +1, ' %B %Y')),
just = "left",
x = unit(0.3, "npc"),
y = unit(0.04, "npc"),
gp = gpar(col = "#0071B6",
fontsize = "18",
# fontfamily = 'Verdana',
fontface = 'bold'))
grid.text(paste0('*We measure change by looking at cases in this week'),
just = "left",
x = unit(0.6, "npc"),
y = unit(0.069, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.text(paste0('(seven days to ', format(complete_date, '%A '), ordinal(as.numeric(format(complete_date, '%d'))), format(complete_date, ' %B %Y'), ') compared'),
just = "left",
x = unit(0.6, "npc"),
y = unit(0.055, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.text(paste0('to the last week (seven days to ', ordinal(as.numeric(format(complete_date - 7, '%d'))), format(complete_date - 7, ' %B %Y'), '). This is '),
just = "left",
x = unit(0.6, "npc"),
y = unit(0.04, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.text(paste0('because data for more recent days are considered incomplete.'),
just = "left",
x = unit(0.6, "npc"),
y = unit(0.025, "npc"),
gp = gpar(col = "#000000",
# fontfamily = 'Verdana',
fontsize = "9"))
grid.raster(wscc_logo,
y = unit(0.96, "npc"),
x = unit(0.85, "npc"),
vjust = 1,
hjust = 0,
width = .12)
dev.off()
library(easypackages)
libraries(c("readxl", "readr", "plyr", "dplyr", "ggplot2", "png", "tidyverse", "reshape2", "scales", "viridis", "rgdal", "officer", "flextable", "tmaptools", "lemon", "fingertipsR", "jsonlite"))
setwd('~/GitHub/gbd_2019/')
data_directory <- './Source_files/Raw'
meta_directory <- './Source_files'
list.files('./Source_files')
codebook <- read_csv(paste0(meta_directory,'/IHME_GBD_2019_CODEBOOK_Y2020M11D25.csv'))
codebook <- read_csv(paste0(meta_directory,'/IHME_GBD_2019_CODEBOOK_Y2020M11D25.csv'))
cause_hierarchy <- read_excel(paste0(meta_directory, '/IHME_GBD_2019_CAUSE_HIERARCHY_Y2020M11D25.xlsx'))
wsx_df <- unique(list.files("~/gbd_data")[grepl("Cause_", list.files("~/gbd_data")) == TRUE]) %>%
map_df(~read_csv(paste0("~/gbd_data/",.)))
unique(wsx_df$measure_name)
wsx_yll <- wsx_df %>%
filter(measure_name == 'YLLs (Years of Life Lost)')
wsx_daly <- wsx_df %>%
filter(measure_name == 'DALYs (Disability-Adjusted Life Years)')
wsx_yld <- wsx_df %>%
filter(measure_name == 'YLDs (Years Lived with Disability)')
wsx_deaths <- wsx_df %>%
filter(measure_name == 'Deaths')
wsx_incidence <- wsx_df %>%
filter(measure_name == 'Incidence')
wsx_prevalence <- wsx_df %>%
filter(measure_name == 'Prevalence')
nrow(wsx_yll) + nrow(wsx_daly) + nrow(wsx_yld) + nrow(wsx_deaths) + nrow(wsx_incidence) + nrow(wsx_prevalence)
rm(wsx_df)
wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val, upper, lower) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
write_rds(., paste0(data_directory, '/wsx_level_2_deaths.rds'))
le_raw <- read_csv('https://github.com/psychty/gbd_2019/blob/ecd33659ad73f41d90e9296cc3d55da3555e420d/Source_files/Raw/Health_Adjusted_Life_expectancy_SE_2019.csv')
hale_raw <- read_csv('https://github.com/psychty/gbd_2019/blob/ecd33659ad73f41d90e9296cc3d55da3555e420d/Source_files/Raw/Life_expectancy_SE_2019.csv')
View(le_raw)
le_raw <- read_csv('https://raw.githubusercontent.com/psychty/gbd_2019/ecd33659ad73f41d90e9296cc3d55da3555e420d/Source_files/Raw/Life_expectancy_SE_2019.csv')
hale_raw <- read_csv('https://raw.githubusercontent.com/psychty/gbd_2019/ecd33659ad73f41d90e9296cc3d55da3555e420d/Source_files/Raw/Health_Adjusted_Life_expectancy_SE_2019.csv')
View(le_raw)
View(le_raw)
le_raw %>%
filter(location == 'West Sussex') %>%
view()
le_raw %>%
filter(location == 'West Sussex') %>%
filter(year %in% c(2017, 2019)) %>%
view()
le_raw %>%
filter(location == 'South East region') %>%
filter(year %in% c(1990, 2019)) %>%
view()
le_raw %>%
filter(location == 'South East Region') %>%
filter(year %in% c(1990, 2019)) %>%
view()
View(le_raw)
le_raw %>%
filter(location == 'South East England') %>%
filter(year %in% c(1990, 2019)) %>%
view()
le_raw %>%
filter(location == 'South East England') %>%
filter(year %in% c(1990, 2019)) %>%
filter(sex != 'Both') %>%
view()
le_raw %>%
filter(location == 'South East England') %>%
filter(year %in% c(1990, 2019)) %>%
filter(sex != 'Both') %>%
filter(age == '<1 years')
le_raw %>%
filter(location == 'South East England') %>%
filter(year %in% c(1990, 2019)) %>%
filter(sex != 'Both') %>%
filter(age == '<1 year')
le_raw %>%
filter(location == 'South East England') %>%
filter(year %in% c(1990, 2019)) %>%
filter(sex != 'Both') %>%
filter(age == '<1 year') %>%
select(sex, year, val) %>%
pivot_wider(values_from = val,
names_from = year)
getwd()
output_directory <- './Source_files/JSON'
le_wsx <- le_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
LE = val)
View(hale_raw)
hale_wsx <- hale_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
HALE = val)
le_wsx <- le_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
Sex = sex,
LE = val)
hale_wsx <- hale_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
Sex = sex,
HALE = val)
le_wsx <- le_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
Sex = sex,
Year = year,
LE = val)
hale_wsx <- hale_raw %>%
filter(location == 'West Sussex') %>%
filter(age == '<1 year') %>%
select(location, sex, year, val) %>%
rename(Name = location,
Sex = sex,
Year = year,
HALE = val)
wsx_df_1 <- le_wsx %>%
left_join(hale_wsx, by = c('Name', 'Sex', 'Year'))
View(wsx_df_1)
le_wsx %>%
left_join(hale_wsx, by = c('Name', 'Sex', 'Year')) %>%
toJSON() %>%
write_lines(paste0(output_directory, '/le_wsx.json'))
le_wsx %>%
left_join(hale_wsx, by = c('Name', 'Sex', 'Year')) %>%
mutate(Sub_optimal_health = LE - HALE) #%>%
le_wsx %>%
left_join(hale_wsx, by = c('Name', 'Sex', 'Year')) %>%
mutate(Sub_optimal_health = LE - HALE) %>%
toJSON() %>%
write_lines(paste0(output_directory, '/le_wsx.json'))
# Mortality ####
wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val, upper, lower) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
view()
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val, upper, lower) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(age == 'All Ages')
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val, upper, lower) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages')
View(top_ten)
View(top_ten)
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages')
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages') %>%
pivot_wider(names_from = 'metric_name',
values_from = 'val')
View(top_ten)
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages') %>%
pivot_wider(names_from = 'metric_name',
values_from = 'val') %>%
group_by(Name, Sex, Age, Year) %>%
mutate(Number_rank = rank(desc(Number)))
View(top_ten)
top_ten <- wsx_deaths %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages') %>%
pivot_wider(names_from = 'metric_name',
values_from = 'val') %>%
group_by(Name, Sex, Age, Year) %>%
mutate(Number_rank = rank(desc(Number))) %>%
filter(Number_rank <= 10)
View(top_ten)
top_ten %>%
toJSON() %>%
write_lines(paste0(output_directory, '/top_ten_mortality_wsx.json'))
output_directory <- './Outputs'
le_wsx %>%
left_join(hale_wsx, by = c('Name', 'Sex', 'Year')) %>%
mutate(Sub_optimal_health = LE - HALE) %>%
toJSON() %>%
write_lines(paste0(output_directory, '/le_wsx.json'))
top_ten %>%
toJSON() %>%
write_lines(paste0(output_directory, '/top_ten_mortality_wsx.json'))
library(easypackages)
libraries(c("readxl", "readr", "plyr", "dplyr", "ggplot2", "png", "tidyverse", "reshape2", "scales", "viridis", "rgdal", "officer", "flextable", "tmaptools", "lemon", "fingertipsR", "jsonlite"))
setwd('~/GitHub/gbd_2019/')
data_directory <- './Source_files/Raw'
output_directory <- './Outputs'
meta_directory <- './Source_files'
# download.file('http://ghdx.healthdata.org/sites/default/files/ihme_query_tool/IHME_GBD_2019_CODEBOOK.zip', destfile = paste0(meta_directory, '/codebook.zip'), mode = 'wb')
# unzip(paste0(meta_directory, '/codebook.zip'), exdir = meta_directory)
list.files('./Source_files')
codebook <- read_csv(paste0(meta_directory,'/IHME_GBD_2019_CODEBOOK_Y2020M11D25.csv'))
cause_hierarchy <- read_excel(paste0(meta_directory, '/IHME_GBD_2019_CAUSE_HIERARCHY_Y2020M11D25.xlsx'))
wsx_df <- unique(list.files("~/gbd_data")[grepl("Cause_", list.files("~/gbd_data")) == TRUE]) %>%
map_df(~read_csv(paste0("~/gbd_data/",.)))
unique(wsx_df$measure_name)
wsx_yll <- wsx_df %>%
filter(measure_name == 'YLLs (Years of Life Lost)')
wsx_daly <- wsx_df %>%
filter(measure_name == 'DALYs (Disability-Adjusted Life Years)')
wsx_yld <- wsx_df %>%
filter(measure_name == 'YLDs (Years Lived with Disability)')
wsx_deaths <- wsx_df %>%
filter(measure_name == 'Deaths')
wsx_incidence <- wsx_df %>%
filter(measure_name == 'Incidence')
wsx_prevalence <- wsx_df %>%
filter(measure_name == 'Prevalence')
nrow(wsx_yll) + nrow(wsx_daly) + nrow(wsx_yld) + nrow(wsx_deaths) + nrow(wsx_incidence) + nrow(wsx_prevalence)
wsx_df %>%
select(measure_name, location_name, sex_name, age_name, cause_id, cause_name, metric_name, year, val) %>%
rename(Name = location_name,
Sex = sex_name,
Age = age_name,
Cause = cause_name,
Year = year,
Measure = measure_name) %>%
left_join(cause_hierarchy[c('Cause ID', 'Level')], by = c('cause_id' = 'Cause ID')) %>%
filter(Level == 2) %>%
filter(Age == 'All Ages') %>%
pivot_wider(names_from = 'metric_name',
values_from = 'val') %>%
group_by(Measure, Name, Sex, Age, Year) %>%
mutate(Number_rank = rank(desc(Number))) %>%
filter(Number_rank <= 10) %>%
toJSON() %>%
write_lines(paste0(output_directory, '/top_ten_wsx.json'))
